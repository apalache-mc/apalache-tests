name: Run Benchmarks

# For each combination of version and experiment suite (called "strat")
# this workflow does the following in a dedicated build agent:
#
# - Creates a temporary branch for storing the results of the experiment run
# - Runs the experiments
# - Commits the results to the temprary branch
#
# Once all experiments have been run, a new agent is created which
#
# - merges in all the results from the temporary branches
# - updates the report that summarizes the results for each experiment suite
# - opens a PR into master with the updates results and reports

on:
  # TODO: Change to only run on master branch
  push:
    branches:
      - master
      - shon/add-ci # FIXME
  # TODO: Enable manual dispatch once merged into master
  # is addressed
  # workflow_dispatch

env:
  REPORT_BRANCH: report-${{ github.run_id }}

jobs:
  run-benchmarks:
    runs-on: ubuntu-latest
    steps:
      - name: checkout benchmarks repo
        uses: actions/checkout@v2

      - name: set up java
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: install apalache
        run: |
          VERSION=unreleased ./scripts/get-apalache.sh
          echo "version=$(cat _VERSION)" >> $GITHUB_ENV

      - name: set up python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7

      - name: install python dependencies
        run: |
          pip install pipenv
          pipenv install --system --deploy --ignore-pipfile

      - name: run benchmarks
        run: |
          make run strat=001indinv version="${{ env.version }}"
          # while read strat; do
          #   make run strat=$strat version="${{ env.version }}"
          # done < STRATEGIES

      - name: open PR with report
        run: |
          set -x
          git config --global user.name "$GITHUB_ACTOR"
          git config --global user.email "github@actions.ci"
          git checkout -b "report/${{ env.version }}"
          git add results
          commit_msg="Add reports from v${{ env.version }}"
          git commit -m "$commit_msg"
          hub pull-request \
          --push \
          --message="$commit_msg"
          --base="master"
